@using PassApp.Data;
@using PassApp.Web.Components
@using PassApp.Web.Components.Buttons;
@using PassApp.Web.Components.Form
@using PassApp.Web.Components.Modal
@using PassApp.Web.Components.Table;
@inject PassAppContext context
@page "/"

<Table Model="Table" Action="ListingAction" />

<Modal @ref="ModalRef" Centered Save="SaveForm">
    <ItemForm @ref="FormRef" />
</Modal>

@code {
    public TableModel? Table { get; set; }
    public Modal? ModalRef { get; set; }
    public ItemForm? FormRef { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var random = new Random();

        Table = new TableModel
        {
            Headers = new List<TableHeaderModel>
            {
                new TableHeaderModel { Name = "Category", Width = 10, Filter = TableHeaderModel.FilterType.DropDown },
                new TableHeaderModel { Name = "Title", Width = 10, Filter = TableHeaderModel.FilterType.Text, Column = TableHeaderModel.ColumnType.Link },
                new TableHeaderModel { Name = "Username", Width = 10, Filter = TableHeaderModel.FilterType.Text, Column = TableHeaderModel.ColumnType.Button },
                new TableHeaderModel { Name = "Email", Width = 10, Filter = TableHeaderModel.FilterType.Text, Column = TableHeaderModel.ColumnType.Button },
                new TableHeaderModel { Name = "Password", Width = 10, Column = TableHeaderModel.ColumnType.Password },
                new TableHeaderModel { Name = "", Width = 1 }
            },
            StoredItems = new List<TableBodyModel>(),
            FooterButtons = new List<IconButtonModel>
            {
                new IconButtonModel { IconClass = "oi oi-plus text-success", IconText = "Add", Parameters = new[] { "", "" } }
            },
            HasPaging = true
        };

        var numOfItems = random.Next(25, 250);

        foreach (var item in Enumerable.Range(0, numOfItems))
        {
            var isLink = random.Next(0, 2) == 1;
            var email = "c.r.jobin@gmail.com";
            var passwordLength = random.Next(10, 18);
            var password = "Password";
            var id = Guid.NewGuid();

            Table.StoredItems.Add(new TableBodyModel
            {
                Content = new List<TableCellModel>
                {
                    new TableCellModel { Text = "Category" },
                    new TableCellModel { Text = "Title" },
                    new TableCellModel { Text = "Uuby" },
                    new TableCellModel { Text = email },
                    new TableCellModel { Text = password }
                },
                Buttons = new List<IconButtonModel>
                {
                    new IconButtonModel { IconClass = "oi oi-pencil text-primary", IconText = "View", Parameters = new[] { id.ToString() } }
                }
            });
        }
    }

    protected async Task ListingAction(string[] args)
    {
        ModalRef.Open();
    }

    protected async Task SaveForm()
    {
        if (FormRef.Context.IsValid())
        {
            await Task.Delay(3000);
            ModalRef.Close();
        }
    }
}
